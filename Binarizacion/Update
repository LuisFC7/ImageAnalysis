class Ventana2():
    def __init__(self, master):
        self.valorumbral = IntVar(value=0)
        self.valorumbral2= IntVar(value=0)
        self.valormorfo= IntVar(value=0)#umbralizar imagen y despues aplicar ee's
        self.eti = Label(master, text="Binarización")
        self.eti.pack(side=TOP, fill=BOTH, expand=True, padx=5, pady=5)
        self.eti.config(bg="light sky blue", font=("Arial, 20"))
        self.open = Button(master, text="Imagen", command=self.openimagen, height=1, width=20)
        self.open.pack()
        self.open.config(bg="mediumpurple1", font=("Arial, 12"))
        self.hi = Button(master, text="Histograma de la Imagen", command=self.gethistogramm, height=1, width=32)
        self.hi.pack()
        self.hi.config(bg="mediumpurple1", font=("Arial, 12"))
        self.btnGris = Button(master, text="Conversión a gris", command=self.conversiongris, height=1, width=27)
        self.btnGris.pack()
        self.btnGris.config(bg="mediumpurple1", font=("Arial, 12"))
        self.ruido = Button(master, text="Multiumbralizacion", command=self.multiplebinarization, height=1, width=20)
        self.ruido.pack()
        self.ruido.config(bg="mediumpurple1", font=("Arial, 12"))
        self.textum1 = Label(master, text="Valor para Umbral 1")
        self.textum1.place(x=20, y=370)
        self.textum1.config(bg="CadetBlue1")
        self.vumbral = Entry(master, textvariable=self.valorumbral,width=10)  # obtiene el valor de umbral mediante entry
        self.vumbral.place(x=20, y=400)
        self.textum1 = Label(master, text="Valor para Umbral 2")
        self.textum1.place(x=20, y=420)
        self.textum1.config(bg="CadetBlue1")
        self.vumbral = Entry(master, textvariable=self.valorumbral2,width=10)  # obtiene el valor de umbral mediante entry
        self.vumbral.place(x=20, y=450)
        self.vmorfo = Entry(master, textvariable=self.valormorfo,width=10)  # obtiene el valor de umbral mediante entry
        self.vmorfo.place(x=20, y=480)
        self.morfo = Button(master, text="Morfología", command=self.morfologiabinaria, height=1, width=20)
        self.morfo.pack()
        self.morfo.config(bg="mediumpurple1", font=("Arial, 12"))
        self.botonCerrar = Button(master, text="Cerrar", command=master.quit)
        self.botonCerrar.pack()
        self.botonCerrar.config(bg="pink1", font=("Arial, 12"))

    def openimagen(self):
        global imagenl
        imagenl = filedialog.askopenfilename(title="Seleccionar Imagen", filetypes=(
        ("jpg files", ".jpg"), ("files png", ".png"), ("jpeg files", ".jpeg")))  # declaración de la ventana
        imagen = cv2.imread(imagenl)
        cv2.imshow("Imagen a solucionar", imagen)

    def gethistogramm(self):
        global imagenl
        img = cv2.imread(imagenl)
        color = ('b', 'g', 'r')
        for i, c in enumerate(color):
            hist = cv2.calcHist([img], [i], None, [256], [0, 256])
            plt.plot(hist, color=c)
            plt.xlim([0, 256])
        plt.show()
        cv2.destroyAllWindows()

    def conversiongris(self):
        global imab, imagris
        #matim = imagenl
        matim = cv2.imread(imagenl)
        matrizim = np.array(matim)
        matrizeros = np.zeros((int(matrizim.shape[0]), int(matrizim.shape[1])))
        for n in (range(matrizim.shape[0])):
            for m in (range(matrizim.shape[1])):
                R = 0
                G = 0
                B = 0
                ope = 0
                for i in (range(matrizim.shape[2])):
                    if i == 0:
                        R = matrizim[n, m, i] * 0.3
                        ope = ope + R
                    elif i == 1:
                        G = matrizim[n, m, i] * 0.59
                        ope = ope + G
                else:
                    B = matrizim[n, m, i] * 0.11
                    ope = ope + B
                    matrizeros[n, m] = ope

        aux = np.array(matrizeros, dtype="uint8")
        cv2.imshow("Grises", aux)
        cv2.imwrite("Grises.jpg", aux)
        imagris = cv2.imread("Grises.jpg")
        #cv2.waitKey(0)

    def multiplebinarization(self):
        global imagris
        img = imagris
        # umbral 1
        umbral = int(self.valorumbral.get())  # variable que obtiene valor de umbral por consola
        umbral2 = int(self.valorumbral2.get())
        ret, binary = cv2.threshold(img, umbral, 255, cv2.THRESH_BINARY)
        cv2.imshow('Umbral 1', binary)
        cv2.imwrite("umbral 1.jpg", binary)
        imabi = cv2.imread("umbral 1.jpg")
        # Umbral global
        ret1, binary1 = cv2.threshold(img, umbral2, 255, cv2.THRESH_BINARY)
        cv2.imshow('Umbral 2', binary1)
        cv2.imwrite("Umbral 2.jpg", binary1)
        imabi1 = cv2.imread("Umbral 2.jpg")
        img_bwa = cv2.bitwise_xor(imabi, imabi1)
        cv2.imshow('Union', img_bwa)

    def morfologiabinaria(self):
        global imagris
        img = cv2.imread("Grises.jpg")
        valormo = int(self.valormorfo.get())
        ret, binaria = cv2.threshold(img, valormo, 255, cv2.THRESH_BINARY)
        cv2.imshow('Binarización', binaria)
        cv2.imwrite("Binarizacion.jpg", binaria)
        binarizada = cv2.imread("Binarizacion.jpg")
        #primero se binnzariza la imagen para la detección de objetos
        #ahora se aplican los ee y dilatcación para segmentiación de los mismos
        #empezar desde (1,1) de la imagen
        matsave = np.zeros((binarizada.shape[0], binarizada.shape[1]), dtype=int)#matriz para guardar las operaciones
        w=binarizada.shape[0]-1 #utilizamos el -1 para que se detenga en la coordenada(n-1,m-1) de la imagen
        h=binarizada.shape[1]-1

        for n in range(1, w):
            for m in range(1, h):
                for i in range(1, binarizada.shape[2]):
                    #ee para diagonal izquierda
                    if binarizada.item(n,m,i) & binarizada.item(n-1,m+1,i) & binarizada.item(n+1,m-1,i)==1:
                        matsave.itemset((n-1, m-1,i), 0)
                        matsave.itemset((n, m-1), 0)
                        matsave.itemset((n+1, m-1), 1)
                        matsave.itemset((n-1, m), 0)
                        matsave.itemset((n, m), 1)
                        matsave.itemset((n+1, m ), 0)
                        matsave.itemset((n-1, m+1), 1)
                        matsave.itemset((n, m+1), 0)
                        matsave.itemset((n+1, m+1), 0)

        mataux = np.array(matsave, dtype="uint8")
        cv2.imshow("EE", mataux)
        cv2.imwrite("EE.jpg", mataux)
        imapon = cv2.imread("EE.jpg")
        # cv2.waitKey(0)


window2 = Tk() #segmentacion
Ventana2 = Ventana2(window2)
window2.config(bg="black")
window2.geometry('800x500')
window2.resizable(width=0, height=0)
window2.title("Umbralización")
window2.iconbitmap("Icon.ico")
#window0.mainloop()
window2.mainloop()
