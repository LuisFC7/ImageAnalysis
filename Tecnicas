# Desplazamiento
def displacement(img, displace):
    imagen = img.copy()
    imagen.astype(dtype=np.int32)  # convertir a 32 bits
    height = imagen.shape[0]
    width = imagen.shape[1]
    try:
        for h in range(height):
            for w in range(width):
                imagen[h][w][0] += displace
                imagen[h][w][1] += displace
                imagen[h][w][2] += displace
        imagen[imagen > 255] = 255
        imagen[imagen < 0] = 0
    except:
        for h in range(h):
            for w in range(width):
                imagen[h][w] += displace
        imagen[imagen > 255] = 255
        imagen[imagen < 0] = 0
    return imagen.astype(dtype=np.uint8)
 
# Expansion
def growth(imag, min, max):
    imagen = imag.copy()
    imagen.astype(dtype=np.int32)
    height = imagen.shape[0]
    width = imagen.shape[1]
    try:
        fmax = np.max(imagen)
        fmin = np.min(imagen)
        for h in range(height):
            for w in range(width):
                imagen[h][w][0] = int(round(((max - min) / (fmax - fmin)) * (imagen[h][w][0] - fmin) + min))
                imagen[h][w][1] = int(round(((max - min) / (fmax - fmin)) * (imagen[h][w][1] - fmin) + min))
                imagen[h][w][2] = int(round(((max - min) / (fmax - fmin)) * (imagen[h][w][2] - fmin) + min))
        imagen[imagen > 255] = 255
        imagen[imagen < 0] = 0
    except:
        fmax = np.max(imagen)
        fmin = np.mix(imagen)
        for h in range(height):
            for w in range(width):
                imagen[h][w] = int(round(((max - min) / (fmax - fmin)) * (imag[h][w] - fmin) + min))
            imagen[imagen > 255] = 255
            imagen[imagen < 0] = 0
    return imagen.astype(dtype=np.uint8)

#Estrechamiento
def narrowing(imag,min1,max1):
    imagen = imag.copy()
    imagen.astype(dtype=np.int32)
    height = imagen.shape[0]
    width = imagen.shape[1]
    try:
        fmax = np.max(imagen)
        fmin = np.min(imagen)
        for h in range(height):
            for w in range(width):
                imagen[h][w][0] = int(round(((max1 - min1) / (fmax - fmin)) * (imagen[h][w][0] - fmin) + min1))
                imagen[h][w][1] = int(round(((max1 - min1) / (fmax - fmin)) * (imagen[h][w][1] - fmin) + min1))
                imagen[h][w][2] = int(round(((max1 - min1) / (fmax - fmin)) * (imagen[h][w][2] - fmin) + min1))
        imagen[imagen > 255] = 255
        imagen[imagen < 0] = 0
    except:
        fmax = np.max(imagen)
        fmin = np.min(imagen)
        for h in range(height):
            for w in range(width):
                imagen[h][w] = int(round(((max1 - min1) / (fmax - fmin)) * (imagen[h][w] - fmin) + min1))
        imagen[imagen > 255] = 255
        imagen[imagen < 0] = 0
    return imagen.astype(dtype=np.uint8)
